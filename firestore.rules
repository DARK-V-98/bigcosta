
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin/developer roles
    function isDeveloper(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.email == 'thimira.vishwa2003@gmail.com';
    }
    
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    function isPrivilegedUser(userId) {
        return request.auth != null && (isDeveloper(userId) || isAdmin(userId));
    }

    // Users collection:
    // - Authenticated users can read/create their own document.
    // - Only admins/developers can update other user roles.
    // - No one can delete user documents.
    match /users/{userId} {
      allow read, create: if request.auth != null && request.auth.uid == userId;
      allow update: if isPrivilegedUser(request.auth.uid);
      allow delete: if false; // Prevent deletion
    }
    
    // Testimonials:
    // - Anyone can read.
    // - Authenticated users can create their own testimonial but cannot update/delete it.
    match /testimonials/{testimonialId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Prevent modification after creation
    }
    
    // Contact Submissions:
    // - Anyone can create a submission.
    // - Only admins/developers can read, update (e.g., mark as read), or delete them.
    match /contactSubmissions/{submissionId} {
      allow create: if true;
      allow read, update, delete: if isPrivilegedUser(request.auth.uid);
    }
    
    // Public content collections (Projects, Categories, Events)
    // - Anyone can read.
    // - Only admins/developers can write (create, update, delete).
    match /projects/{projectId} {
      allow read: if true;
      allow write: if isPrivilegedUser(request.auth.uid);
    }
    
    match /projectCategories/{categoryId} {
      allow read: if true;
      allow write: if isPrivilegedUser(request.auth.uid);
    }
    
    match /directorEvents/{eventId} {
      allow read: if true;
      allow write: if isPrivilegedUser(request.auth.uid);
    }
    
    // Fallback rule: Deny all access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
